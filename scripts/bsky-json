#!/usr/bin/env python

from bsky_utils import get_post_thread, validate_path, save_json, print_json, url_basename
import sys
from pathlib import Path
import argparse

def input_validation():
    config = {
        'default_dir': '',
        'always_replies': False,
        'always_print': False,
        'always_silent': True,
    }

    parser = argparse.ArgumentParser(description="Extract JSON from Bluesky posts.")
    
    parser.add_argument("url", help="The URL to process.")
    parser.add_argument("path", nargs="?", default=None, help="Path for output, defaults to config setting or current directory.")
    parser.add_argument("--replies", action="store_true", help="Include replies and parents.")
    parser.add_argument("--silent", action="store_true", help="Prevent printing JSON to screen.")
    parser.add_argument("--print", action="store_true", help="Prevent saving JSON to file.")

    args = parser.parse_args()
    url = args.url
    path = args.path if args.path else (config["default_dir"] if config["default_dir"] else Path.cwd())
    reply_mode = args.replies or config["always_replies"]
    silent_mode = args.silent or config["always_silent"]
    print_mode = args.print or config["always_print"]

    return url, path, reply_mode, silent_mode, print_mode

def main():
    url, path, reply_mode, silent_mode, print_mode = input_validation()

    depth = 1000 if reply_mode else 0
    parent_height = 1000 if reply_mode else 0

    thread = get_post_thread(url, depth, parent_height)

    if not silent_mode:
        print_json(thread)
    if print_mode:
        return

    rkey = url_basename(url)
    path = validate_path(path, rkey, ['json'])
    save_json(thread, path)

if __name__ == "__main__":
    main()