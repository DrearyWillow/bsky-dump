#!/usr/bin/env python

import requests
import subprocess
import sys
from pathlib import Path

defaults = {
    "default_dir": ''
}

def input_validation():
    input_filename = ""
    if len(sys.argv) < 2:
        print("No url entered.")
        sys.exit(1)
    else:
        input_url = sys.argv[1]
    if len(sys.argv) < 3:
        input_dir = defaults["default_dir"]
        if input_dir == '':
            input_dir = str(Path.home()) + "/Downloads"
            print(f"No default directory specified. Attempting {input_dir}...")
    else:
        input_dir = sys.argv[2]
    input_path = Path(input_dir)
    if not input_path.is_dir():
        if input_path.parent.is_dir():
            input_dir = str(input_path.parent)
            input_filename = input_path.stem
        else:
            print(f"{input_dir} is not a valid directory")
            sys.exit(1)
    if len(sys.argv) > 3:
        json_print_mode = 1
    else:
        json_print_mode = 0
    return input_url, input_dir, json_print_mode, input_filename

def url2uri(post_url):
    parts = post_url.rstrip('/').split('/')
    if len(parts) < 4:
        print("POST URL: " + post_url)
        raise ValueError("URL does not have enough segments.")
    username = parts[-3]
    authority = resolve_did(username)
    rkey = parts[-1]
    collection = 'app.bsky.feed.post'
    at_uri = f"at://{authority}/{collection}/{rkey}"
    return at_uri, rkey

def resolve_did(handle):
    resolve_url = 'https://bsky.social/xrpc/com.atproto.identity.resolveHandle'
    params = {'handle': handle}
    response = requests.get(resolve_url, params=params)
    if response.status_code == 200:
        data = response.json()
        return data['did']
    else:
        raise Exception(f"Failed to resolve DID. Status code: {response.status_code}, Message: {response.text}")

def get_post_thread(post_url):
    BASE_URL = 'https://public.api.bsky.app/xrpc/app.bsky.feed.getPostThread'
    HEADERS = {'Content-Type': 'application/json'}
    at_uri, rkey = url2uri(post_url)
    params = {'uri': at_uri, 'depth': 0}
    response = requests.get(BASE_URL, headers=HEADERS, params=params)
    if response.status_code == 200:
        return response.json(), rkey
    else:
        raise Exception(f"Failed to retrieve post thread. Status code: {response.status_code}, Message: {response.text}")

def check_ffmpeg():
    try:
        result = subprocess.run(['ffmpeg', '-version'], stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
        if result.returncode != 0:
            print("ffmpeg is not installed.")
            sys.exit(1)
    except FileNotFoundError:
        print("ffmpeg is not installed.")
        sys.exit(1)

def download_video(post_data, path):
    playlist_url = post_data.get('thread', {}).get('post', {}).get('embed', {}).get('playlist', '')
    if not playlist_url:
        print(f"Post does not have a video embed.")
        sys.exit(1)
    check_ffmpeg()
    result = subprocess.run(
        ['ffmpeg', '-i', playlist_url, '-c', 'copy', '-bsf:a', 'aac_adtstoasc', path],
        stderr=subprocess.PIPE, text=True)
    if result.returncode == 0:
        print(f"Video successfully downloaded to {path}")

def main():
    try:
        post_url, directory, json_print_mode, input_filename = input_validation()
        post_data, rkey = get_post_thread(post_url)
        if json_print_mode:
            print(post_data)
            sys.exit(1)
        if input_filename != "":
            path = f"{directory}/{input_filename}.mp4"
        else:
            path = f"{directory}/{rkey}.mp4"
        download_video(post_data, path)
    except Exception as e:
        print(e)

if __name__ == "__main__":
    main()